 /* KIARA - Middleware for efficient and QoS/Security-aware invocation of services and exchange of messages
 *
 * Copyright (C) 2014 Proyectos y Sistemas de Mantenimiento S.L. (eProsima)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * @file CalculatorServant.java
 * This file contains the servant processing implementation code. It parses the service executed and calls the corresponding method.
 *
 * This file was generated by using the tool Kiaragen.
 *
 */
 
 
package com.example;

import java.io.IOException;
import org.fiware.kiara.serialization.Serializer;
import org.fiware.kiara.serialization.impl.SerializerImpl;
import org.fiware.kiara.server.Servant;
import org.fiware.kiara.transport.Transport;
import org.fiware.kiara.transport.impl.TransportImpl;
import org.fiware.kiara.transport.impl.TransportMessage;

import org.fiware.kiara.serialization.impl.BinaryInputStream;
import org.fiware.kiara.serialization.impl.BinaryOutputStream;

/**
 * Abstract class used to process the incoming remote calls. 
 *
 * @author Kiaragen tool.
 *
 */
public abstract class CalculatorServant implements Servant, Calculator {

	@Override
	public String getServiceName() {
		return "Calculator";
	}
	
    @Override
    public TransportMessage process(Serializer ser, TransportMessage message, Transport transport, Object messageId, BinaryInputStream bis) {

        SerializerImpl serImpl;
        TransportImpl transportImpl;

        if (ser instanceof SerializerImpl && transport instanceof TransportImpl) {
            serImpl = (SerializerImpl) ser;
            transportImpl = (TransportImpl) transport;
        } else {
            return null; // TODO Raise error
        }

        try {
            String operation = serImpl.deserializeOperation(bis);


            if (operation.equals("add")) {
            	int n1 = serImpl.deserializeI32(bis, "");
            	int n2 = serImpl.deserializeI32(bis, "");
            	
            	BinaryOutputStream retBuffer = new BinaryOutputStream();
                TransportMessage retMsg = transportImpl.createTransportMessage(message);
             	serImpl.serializeMessageId(retBuffer, messageId);
            	
            		int ret = add (n1, n2);
            		// Serialize return code (0 = OK)
            		serImpl.serializeUI32(retBuffer, "", 0);
            		// Serialize return type
            		serImpl.serializeI32(retBuffer, "", ret);

            	
             	retMsg.setPayload(retBuffer.getByteBuffer());
            	return retMsg;
            	
            	
            } 

            if (operation.equals("subtract")) {
            	int n1 = serImpl.deserializeI32(bis, "");
            	int n2 = serImpl.deserializeI32(bis, "");
            	
            	BinaryOutputStream retBuffer = new BinaryOutputStream();
                TransportMessage retMsg = transportImpl.createTransportMessage(message);
             	serImpl.serializeMessageId(retBuffer, messageId);
            	
            		int ret = subtract (n1, n2);
            		// Serialize return code (0 = OK)
            		serImpl.serializeUI32(retBuffer, "", 0);
            		// Serialize return type
            		serImpl.serializeI32(retBuffer, "", ret);

            	
             	retMsg.setPayload(retBuffer.getByteBuffer());
            	return retMsg;
            	
            	
            } 

        } catch (IOException ex) {
            throw new RuntimeException(ex);
        }
        return null;

    }
	



}
